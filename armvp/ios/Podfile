# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, '14.0'
prepare_react_native_project!

# If you are using a `react-native-flipper` your iOS build will fail when `NO_FLIPPER=1` is set.
# because `react-native-flipper` depends on (FlipperKit,...) that will be excluded
#
# To fix this you can also exclude `react-native-flipper` using a `react-native.config.js`
# ```js
# module.exports = {
#   dependencies: {
#     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
# ```
flipper_config = ENV['NO_FLIPPER'] == "1" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'armvp' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    # Enables Flipper.
    #
    # Note that if you have use_frameworks! enabled, Flipper will not work and
    # you should disable the next line.
    :flipper_configuration => flipper_config,
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  target 'armvpTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )

    require 'xcodeproj'
    project_path = Dir['*.xcodeproj'].first
    project = Xcodeproj::Project.open(project_path)
    app_target = project.targets.find { |t| t.product_type == 'com.apple.product-type.application' }

    if app_target
      exists = app_target.build_phases.any? do |bp|
        bp.isa == 'PBXShellScriptBuildPhase' && bp.name == 'Start Metro (RN)'
      end

      unless exists
        phase = app_target.new_shell_script_build_phase('Start Metro (RN)')
        phase.shell_script = <<~'SCRIPT'
          if [ "${CONFIGURATION}" != "Debug" ]; then exit 0; fi
          export RCT_METRO_PORT=${RCT_METRO_PORT:=8081}
          if ! command -v nc >/dev/null 2>&1; then echo "nc missing; skip"; exit 0; fi
          if ! nc -z localhost $RCT_METRO_PORT; then
            echo "Starting Metro on $RCT_METRO_PORT..."
            open -g -a Terminal "$SRCROOT/.." --args yarn start
          else
            echo "Metro already running"
          fi
        SCRIPT

        phases = app_target.build_phases
        compile_idx = phases.index { |bp| bp.isa == 'PBXSourcesBuildPhase' } || phases.length
        phases.delete(phase)
        phases.insert(compile_idx, phase)
        project.save
        Pod::UI.puts 'Added Run Script Phase: Start Metro (RN)'
      else
        Pod::UI.puts 'Run Script Phase already exists'
      end
    else
      Pod::UI.puts 'App target not found, skip Metro phase'
    end
  end
end
